"""
AtCoder 二分探索問題

問題:
N個のボールがあります。i番目のボールの重さはW_iです。


1つ以上のボールを選び、その重さの合計がちょうどXとなるようにしたいです。

そのような選び方が存在するかどうかを判定してください。

入力:
1行目: ボールの数 N と目標の重さ X
2行目: N個のボールの重さ W_1, W_2, ..., W_N

出力:
選び方が存在する場合は "Yes"、存在しない場合は "No" を出力

制約:
1 <= N <= 20
1 <= X <= 10^6
1 <= W_i <= 10^5

入力例1:
5 12
7 5 3 1 8

出力例1:
Yes


解説: ボール3と5を選ぶと、重さの合計は3+8=11となります。

入力例2:
3 21
6 2 3

出力例2:
No
"""




def mysolution():
    N,X = map(int, input().split()) # ボールの数と目標の重さを取得
    weights = list(map(int, input().split())) # ボールの重さを整数リストとして取得

    if 1 <= N <= 20 and 1 <= X <= 10**6 and all(1 <= W_i <= 10**5 for W_i in weights):
        # bit全探索のためのループ
        # 1 << N は 2^N を意味する（2のN乗）
        # 例えばN=3なら、1<<3 = 8（二進数で1000）
        # range(1, 1<<N)とすることで、1から2^N-1までの数（全ての部分集合、空集合を除く）を列挙
        for bit in range(1, 1 << N):  # 1以上のボールを選ぶため1から開始
            total = 0  # 選んだボールの重さの合計
            
            # 各ビットが1かどうかをチェック
            for i in range(N):
                # bit & (1 << i) は、bitの中でi番目のビットが1かどうかをチェックする式
                # 例：bit=5(二進数で101)の場合、i=0,2のビットが1になっている
                if bit & (1 << i):  # i番目のビットが1ならそのボールを選ぶ
                    total += weights[i]  # 選んだボールの重さを加算
            
            # 合計がXと一致するかチェック
            if total == X:
                print("Yes")  # 一致すれば解が存在する
                return
        
        # すべての組み合わせを試しても見つからなかった場合
        print("No")
    else:
        print("Input out of bounds")  # 制約外の入力があった場合
        






def solve():
    """
    【模範解答の解説】
    
    # bit全探索の基本的な考え方
    
    bit全探索とは、N個の要素からなる集合の「全ての部分集合」を効率的に列挙する手法です。
    各要素を「選ぶ」か「選ばない」かの2通りがあるため、全体で2^N通りの組み合わせがあります。
    
    # ビット演算の解説
    
    1. (1 << N) は 2^N を表す（2のN乗）
    2. range(1, 1 << N) で、1から2^N-1までの数値を生成（0は空集合なので含まない）
    3. bit & (1 << i) は、bitの中でi番目のビットが1かどうかをチェックする式
       - 結果が0以外なら、i番目のビットは1（そのボールを選ぶ）
       - 結果が0なら、i番目のビットは0（そのボールを選ばない）
    
    # 具体例（N=3の場合）
    
    例えば、ボールが3個 [A,B,C] あるとき：
    - bit=1（二進数で001）：Cだけ選ぶ
    - bit=2（二進数で010）：Bだけ選ぶ
    - bit=3（二進数で011）：BとCを選ぶ
    - bit=4（二進数で100）：Aだけ選ぶ
    - bit=5（二進数で101）：AとCを選ぶ
    - bit=6（二進数で110）：AとBを選ぶ
    - bit=7（二進数で111）：全部選ぶ（A,B,C）
    """
    # 入力を受け取る
    N, X = map(int, input().split())
    weights = list(map(int, input().split()))
    
    # bit全探索
    for bit in range(1, 1 << N):  # 1以上のボールを選ぶため1から開始
        total = 0
        for i in range(N):
            if bit & (1 << i):
                total += weights[i]
        
        if total == X:
            print("Yes")
            return
    
    print("No")


if __name__ == "__main__":
    # 実行する関数をここで選択（mysolution または solve）
    mysolution()  # 自分の実装を実行する場合
    # solve()     # 模範解答を実行する場合
