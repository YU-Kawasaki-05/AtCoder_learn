"""
AtCoder 全探索問題

問題:
1以上N以下の整数の中で、10進法で各桁の和がA以上B以下であるものの総和を求めてください。

入力:
N A B

出力:
条件を満たす整数の総和

制約:
1 <= N <= 10000
1 <= A <= B <= 36

入力例1:
20 2 5

出力例1:
84
解説: 2+3+4+5+6+7+8+9+10+11+19=84

入力例2:
100 4 16

出力例2:
4554
"""

def mysolution():
    # 入力を受け取る
    N, A, B = map(int, input().split())
    total = 0

    # 制約チェック
    if 1<=N<=10000 and 1<=A<=B<=36:
        # 1からNまでの各数について処理
        for i in range(1, N+1): #1からN+1までの各数で、
            
            # 【現在の実装】
            # この実装は2桁までの数字に対しては正しく動作する
            
            # 1の位はiを10で割ったあまり(t)
            # 10の位は、(i-t) // 10
            # ※ただし3桁以上の数字では正しく計算できない
            #   例：123の場合、t=3, ten=12となり、t+ten=15（正しくは1+2+3=6）
            
            t = i % 10  # 1の位を取得
            ten = (i - t) // 10  # 10の位以上の値を取得（3桁以上の場合は桁の和ではない）

            if A <= digit_sum(i) <= B:  # 各位の和がA以上B以下であるかチェック
                total += i # 条件を満たす場合、総和に加算

        print(total)  # 最終的な総和を出力
    else:
        print("Input out of bounds")  # 制約外の入力があった場合のエラーメッセージ

    


def digit_sum(n):
    """
    整数nの各桁の和を計算する関数
    
    【解説】
    この関数は任意の桁数の整数に対して、各桁の和を計算できる
    例: 123 -> 1 + 2 + 3 = 6
    
    動作原理:
    1. 最下位の桁（1の位）を取り出す: n % 10
    2. その桁を合計値に加算: s += n % 10
    3. 処理した桁を取り除く: n //= 10（整数除算）
    4. nが0になるまで繰り返す
    
    具体例（n=123の場合）:
    - 最初のループ: s += 123 % 10 = 3, n = 123 // 10 = 12
    - 2回目のループ: s += 12 % 10 = 2, n = 12 // 10 = 1
    - 3回目のループ: s += 1 % 10 = 1, n = 1 // 10 = 0
    - ループ終了、s = 3 + 2 + 1 = 6を返す
    """
    s = 0
    while n > 0:
        s += n % 10  # 現在の最下位桁を取得して合計に加算
        n //= 10     # 最下位桁を取り除く（次の桁を処理するため）
    return s




"""
【模範解答の解説】
def solve():
    # 入力を受け取る
    N, A, B = map(int, input().split())
    
    # 条件を満たす整数の総和を計算
    total = 0
    for i in range(1, N + 1):
        # digit_sum関数を使って各桁の和を正確に計算
        # これにより任意の桁数の整数に対して正しく動作する
        sum_digits = digit_sum(i)
        
        # 各桁の和がA以上B以下かをチェック
        if A <= sum_digits <= B:
            total += i  # 条件を満たす場合、総和に加算
    
    # 結果を出力
    print(total)

if __name__ == "__main__":
    solve()

【mysolutionとの違い】
1. digit_sum関数を使うことで、任意の桁数の数字の各桁の和を正確に計算している
2. これにより10000などの大きな数値でも正しく処理できる
3. コードの可読性と再利用性が向上している
"""